//-----------------------------------------------------------------------------
// (Bi)Linear interpolation in 2D and 3D 
//-----------------------------------------------------------------------------
//
// Copyright (C) 2018 Arend Lammertink
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------
// 
// Based on:
//
// Interpolation in Two or More Dimensions
// http://www.aip.de/groups/soe/local/numres/bookcpdf/c3-6.pdf
//
// How to build a lookup table in C (SDCC compiler) with linear interpolation
// http://bit.ly/LUT_c_linear_interpolation
//
// Linear interpolation: calculate correction based on 2D table
// http://bit.ly/Interpolate2D
//
// 2D Array Interpolation
// http://bit.ly/biliniar_barycentric_interpolation
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Multi-include protection
//-----------------------------------------------------------------------------

#ifndef _INTERPOL_H
#define _INTERPOL_H

//-----------------------------------------------------------------------------
// TODO :
//
//   fix16.h includes a number of lerp (linear interpolation) routines. These
//   could perhaps be used to speed things up.
//
//   There are no routines for casting uint16_t integers to/from Fix16. For
//   now, we cast to float before casting to Fix16. 
//
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------

#include <stdint.h>
#include <string.h>
using namespace std;

#ifdef SUPPORT_INTEGER_ARITMETHIC
# include <fix16.hpp>
#endif

//-----------------------------------------------------------------------------
// 1D linear interpolation
//-----------------------------------------------------------------------------

template <typename X, typename Y>
inline Y interpolate( X x, X x_1, X x_2, Y y_1, Y y_2 ) 
{
  Y   one   = 1.0f; // avoid ambigious operator overload
  
  // cast indexes to Y
  Y   _x    = x;
  Y   _x_1  = x_1;
  Y   _x_2  = x_2;

  Y   dx    = (_x - _x_1) / (_x_2 - _x_1);  //  0 <= dx <= 1

  return (one-dx)*y_1 + dx*y_2;
}


//-----------------------------------------------------------------------------
// 2D bilinear interpolation
//-----------------------------------------------------------------------------

template <typename X, typename Y>
inline Y interpolate( X x1, X x2, X x_1, X x_2, X x_3, X x_4,
                                  Y y_1, Y y_2, Y y_3, Y y_4 )
{
  Y   one   = 1.0f; // avoid ambigious operator overload

  // cast indexes to Y
  Y   _x1   = x1;
  Y   _x2   = x2;
  Y   _x_1  = x_1;
  Y   _x_2  = x_2;
  Y   _x_3  = x_3;
  Y   _x_4  = x_4;
  
  Y   dx1   = (_x1 - _x_1) / (_x_2 - _x_1);  // 0 <= dx1 <= 1
  Y   dx2   = (_x2 - _x_3) / (_x_4 - _x_3);  // 0 <= dx2 <= 1

  return (one-dx1)*(one-dx2)*y_1 + dx1*(one-dx2)*y_2 + 
                     dx1*dx2*y_3 + (one-dx1)*dx2*y_4;
}


//-----------------------------------------------------------------------------
// Specialization for integers by casting to Fix16 
//-----------------------------------------------------------------------------

#ifdef SUPPORT_INTEGER_ARITMETHIC

// Specializations generated by python script.
# include "interpol1d_spec.h"
# include "interpol2d_spec.h"

#endif // SUPPORT_INTEGER_ARITMETHIC

//-----------------------------------------------------------------------------
// 
//-----------------------------------------------------------------------------

#endif // End multi-include protection
