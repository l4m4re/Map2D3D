//-----------------------------------------------------------------------------
//
// Copyright (C) 2018 Arend Lammertink
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// 1D specialization for integers by casting to Fix16, generated by script 
//-----------------------------------------------------------------------------


#ifndef _interpol1d_spec_h
#define _interpol1d_spec_h

template<>
inline int8_t interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            int8_t y_1, int8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<int8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline uint8_t interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            uint8_t y_1, uint8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline int16_t interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            int16_t y_1, int16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(y_1),
                               static_cast<Fix16>(y_2) )

#ifndef DEBUG
                             );
#else
  return static_cast<int16_t>(retval);
#endif
}


template<>
inline uint16_t interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            uint16_t y_1, uint16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint16_t>(static_cast<float>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(static_cast<float>(y_1)),
                               static_cast<Fix16>(static_cast<float>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint16_t>(static_cast<float>(retval));
#endif
}


template<>
inline Fix16 interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            Fix16 y_1, Fix16 y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return 
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline float interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            float y_1, float y_2 )
{
#ifdef DEBUG
  float retval = (
#else
  return 
#endif
                  interpolate( static_cast<float>(x),
                               static_cast<float>(x_1),
                               static_cast<float>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline double interpolate( int8_t x, int8_t x_1, int8_t x_2,
                            double y_1, double y_2 )
{
#ifdef DEBUG
  double retval = (
#else
  return 
#endif
                  interpolate( static_cast<double>(x),
                               static_cast<double>(x_1),
                               static_cast<double>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline int8_t interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            int8_t y_1, int8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<int8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline uint8_t interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            uint8_t y_1, uint8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline int16_t interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            int16_t y_1, int16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(y_1),
                               static_cast<Fix16>(y_2) )

#ifndef DEBUG
                             );
#else
  return static_cast<int16_t>(retval);
#endif
}


template<>
inline uint16_t interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            uint16_t y_1, uint16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint16_t>(static_cast<float>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               static_cast<Fix16>(static_cast<float>(y_1)),
                               static_cast<Fix16>(static_cast<float>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint16_t>(static_cast<float>(retval));
#endif
}


template<>
inline Fix16 interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            Fix16 y_1, Fix16 y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return 
#endif
                  interpolate( static_cast<Fix16>(static_cast<int16_t>(x)),
                               static_cast<Fix16>(static_cast<int16_t>(x_1)),
                               static_cast<Fix16>(static_cast<int16_t>(x_2)),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline float interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            float y_1, float y_2 )
{
#ifdef DEBUG
  float retval = (
#else
  return 
#endif
                  interpolate( static_cast<float>(x),
                               static_cast<float>(x_1),
                               static_cast<float>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline double interpolate( uint8_t x, uint8_t x_1, uint8_t x_2,
                            double y_1, double y_2 )
{
#ifdef DEBUG
  double retval = (
#else
  return 
#endif
                  interpolate( static_cast<double>(x),
                               static_cast<double>(x_1),
                               static_cast<double>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline int8_t interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            int8_t y_1, int8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(x),
                               static_cast<Fix16>(x_1),
                               static_cast<Fix16>(x_2),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<int8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline uint8_t interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            uint8_t y_1, uint8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(x),
                               static_cast<Fix16>(x_1),
                               static_cast<Fix16>(x_2),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline int16_t interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            int16_t y_1, int16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(x),
                               static_cast<Fix16>(x_1),
                               static_cast<Fix16>(x_2),
                               static_cast<Fix16>(y_1),
                               static_cast<Fix16>(y_2) )

#ifndef DEBUG
                             );
#else
  return static_cast<int16_t>(retval);
#endif
}


template<>
inline uint16_t interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            uint16_t y_1, uint16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint16_t>(static_cast<float>(
#endif
                  interpolate( static_cast<Fix16>(x),
                               static_cast<Fix16>(x_1),
                               static_cast<Fix16>(x_2),
                               static_cast<Fix16>(static_cast<float>(y_1)),
                               static_cast<Fix16>(static_cast<float>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint16_t>(static_cast<float>(retval));
#endif
}


template<>
inline Fix16 interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            Fix16 y_1, Fix16 y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return 
#endif
                  interpolate( static_cast<Fix16>(x),
                               static_cast<Fix16>(x_1),
                               static_cast<Fix16>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline float interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            float y_1, float y_2 )
{
#ifdef DEBUG
  float retval = (
#else
  return 
#endif
                  interpolate( static_cast<float>(x),
                               static_cast<float>(x_1),
                               static_cast<float>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline double interpolate( int16_t x, int16_t x_1, int16_t x_2,
                            double y_1, double y_2 )
{
#ifdef DEBUG
  double retval = (
#else
  return 
#endif
                  interpolate( static_cast<double>(x),
                               static_cast<double>(x_1),
                               static_cast<double>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline int8_t interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            int8_t y_1, int8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<float>(x)),
                               static_cast<Fix16>(static_cast<float>(x_1)),
                               static_cast<Fix16>(static_cast<float>(x_2)),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<int8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline uint8_t interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            uint8_t y_1, uint8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint8_t>(static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<float>(x)),
                               static_cast<Fix16>(static_cast<float>(x_1)),
                               static_cast<Fix16>(static_cast<float>(x_2)),
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline int16_t interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            int16_t y_1, int16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int16_t>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<float>(x)),
                               static_cast<Fix16>(static_cast<float>(x_1)),
                               static_cast<Fix16>(static_cast<float>(x_2)),
                               static_cast<Fix16>(y_1),
                               static_cast<Fix16>(y_2) )

#ifndef DEBUG
                             );
#else
  return static_cast<int16_t>(retval);
#endif
}


template<>
inline uint16_t interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            uint16_t y_1, uint16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint16_t>(static_cast<float>(
#endif
                  interpolate( static_cast<Fix16>(static_cast<float>(x)),
                               static_cast<Fix16>(static_cast<float>(x_1)),
                               static_cast<Fix16>(static_cast<float>(x_2)),
                               static_cast<Fix16>(static_cast<float>(y_1)),
                               static_cast<Fix16>(static_cast<float>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint16_t>(static_cast<float>(retval));
#endif
}


template<>
inline Fix16 interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            Fix16 y_1, Fix16 y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return 
#endif
                  interpolate( static_cast<Fix16>(static_cast<float>(x)),
                               static_cast<Fix16>(static_cast<float>(x_1)),
                               static_cast<Fix16>(static_cast<float>(x_2)),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline float interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            float y_1, float y_2 )
{
#ifdef DEBUG
  float retval = (
#else
  return 
#endif
                  interpolate( static_cast<float>(x),
                               static_cast<float>(x_1),
                               static_cast<float>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline double interpolate( uint16_t x, uint16_t x_1, uint16_t x_2,
                            double y_1, double y_2 )
{
#ifdef DEBUG
  double retval = (
#else
  return 
#endif
                  interpolate( static_cast<double>(x),
                               static_cast<double>(x_1),
                               static_cast<double>(x_2),
                               y_1,
                               y_2 )

#ifndef DEBUG
                             ;
#else
  return retval;
#endif
}


template<>
inline int8_t interpolate( Fix16 x, Fix16 x_1, Fix16 x_2,
                            int8_t y_1, int8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int8_t>(static_cast<int16_t>(
#endif
                  interpolate( x,
                               x_1,
                               x_2,
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<int8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline uint8_t interpolate( Fix16 x, Fix16 x_1, Fix16 x_2,
                            uint8_t y_1, uint8_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint8_t>(static_cast<int16_t>(
#endif
                  interpolate( x,
                               x_1,
                               x_2,
                               static_cast<Fix16>(static_cast<int16_t>(y_1)),
                               static_cast<Fix16>(static_cast<int16_t>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint8_t>(static_cast<int16_t>(retval));
#endif
}


template<>
inline int16_t interpolate( Fix16 x, Fix16 x_1, Fix16 x_2,
                            int16_t y_1, int16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<int16_t>(
#endif
                  interpolate( x,
                               x_1,
                               x_2,
                               static_cast<Fix16>(y_1),
                               static_cast<Fix16>(y_2) )

#ifndef DEBUG
                             );
#else
  return static_cast<int16_t>(retval);
#endif
}


template<>
inline uint16_t interpolate( Fix16 x, Fix16 x_1, Fix16 x_2,
                            uint16_t y_1, uint16_t y_2 )
{
#ifdef DEBUG
  Fix16 retval = (
#else
  return static_cast<uint16_t>(static_cast<float>(
#endif
                  interpolate( x,
                               x_1,
                               x_2,
                               static_cast<Fix16>(static_cast<float>(y_1)),
                               static_cast<Fix16>(static_cast<float>(y_2)) )

#ifndef DEBUG
                             ));
#else
  return static_cast<uint16_t>(static_cast<float>(retval));
#endif
}


#endif
