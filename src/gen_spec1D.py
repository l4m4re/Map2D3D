#!/usr/bin/python

print "//-----------------------------------------------------------------------------"
print "//"
print "// Copyright (C) 2018 Arend Lammertink"
print "//"
print "// This program is free software; you can redistribute it and/or modify it"
print "// under the terms of the GNU General Public License as published by the Free"
print "// Software Foundation, version 3."
print "//"
print "// This program is distributed in the hope that it will be useful, but WITHOUT"
print "// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or"
print "// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for"
print "// more details."
print "//"
print "// You should have received a copy of the GNU Lesser General Public License"
print "// along with this program. If not, see <http://www.gnu.org/licenses/>."
print "//-----------------------------------------------------------------------------"
print
print"//-----------------------------------------------------------------------------"
print"// 1D specialization for integers by casting to Fix16, generated by script "
print"//-----------------------------------------------------------------------------"
print

print 
print "#ifndef _interpol1d_spec_h"
print "#define _interpol1d_spec_h"
print 

## TODO: check if the fix16_lerp routines may be faster.

for X in ["int8_t", "uint8_t", "int16_t", "uint16_t", "Fix16"]:
  for Y in ["int8_t", "uint8_t", "int16_t", "uint16_t", "Fix16", "float", "double"]:
    R = Y
    if R in ["int8_t", "uint8_t"]:
      R = "int16_t"
    if R in ["uint16_t"]:
      R = "int32_t"
   
    if X == "Fix16" and Y == "Fix16":
      break

    C = Y 
    if C in ["int8_t", "uint8_t", "int16_t", "uint16_t"]:
      C = "Fix16"
    
    prcx  = "static_cast<" + C + ">("
    pocx = ")"
    prcy  = "static_cast<" + C + ">("
    pocy = ")"

    # uint16_t must be casted to float before it van be casted to Fix16
    if X == "uint16_t" and C == "Fix16":
      prcx += "static_cast<float>("
# TODO: check whether or not casting to int32 works.
#      prcx += "static_cast<int32_t>("
      pocx = "))"
    if Y == "uint16_t" and C == "Fix16":
      prcy += "static_cast<float>("
#      prcy += "static_cast<int32_t>("
      pocy = "))"

    print"template<>"
    print"inline "+ Y, "interpolate(", X, "x,", X,"x_1,", X, "x_2,"
    print"                           ", Y, "y_1,", Y, "y_2 )"
    print"{"
#   print'  Serial.print(\"X:', X ,'\"); Serial.println(\"Y:', Y, '\");'
    print"  return static_cast<", R ,">("
    print"                  interpolate( " + prcx + "x"   + pocx + ","
    print"                               " + prcx + "x_1" + pocx + ","
    print"                               " + prcx + "x_2" + pocx + ","
    print"                               " + prcy + "y_1" + pocy + ","
    print"                               " + prcy + "y_2" + pocy + " ));"
    print"}"
    print
    print

print "#endif"
    




